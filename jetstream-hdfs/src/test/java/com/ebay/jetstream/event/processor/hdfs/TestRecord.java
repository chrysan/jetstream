/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.ebay.jetstream.event.processor.hdfs;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"com.ebay.jetstream.event.processor.hdfs\",\"fields\":[{\"name\":\"key1\",\"type\":[\"null\",\"string\"]},{\"name\":\"key2\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence key1;
  @Deprecated public java.lang.CharSequence key2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TestRecord() {}

  /**
   * All-args constructor.
   */
  public TestRecord(java.lang.CharSequence key1, java.lang.CharSequence key2) {
    this.key1 = key1;
    this.key2 = key2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key1;
    case 1: return key2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key1 = (java.lang.CharSequence)value$; break;
    case 1: key2 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key1' field.
   */
  public java.lang.CharSequence getKey1() {
    return key1;
  }

  /**
   * Sets the value of the 'key1' field.
   * @param value the value to set.
   */
  public void setKey1(java.lang.CharSequence value) {
    this.key1 = value;
  }

  /**
   * Gets the value of the 'key2' field.
   */
  public java.lang.CharSequence getKey2() {
    return key2;
  }

  /**
   * Sets the value of the 'key2' field.
   * @param value the value to set.
   */
  public void setKey2(java.lang.CharSequence value) {
    this.key2 = value;
  }

  /** Creates a new TestRecord RecordBuilder */
  public static com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder newBuilder() {
    return new com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder();
  }
  
  /** Creates a new TestRecord RecordBuilder by copying an existing Builder */
  public static com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder newBuilder(com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder other) {
    return new com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder(other);
  }
  
  /** Creates a new TestRecord RecordBuilder by copying an existing TestRecord instance */
  public static com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder newBuilder(com.ebay.jetstream.event.processor.hdfs.TestRecord other) {
    return new com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for TestRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecord>
    implements org.apache.avro.data.RecordBuilder<TestRecord> {

    private java.lang.CharSequence key1;
    private java.lang.CharSequence key2;

    /** Creates a new Builder */
    private Builder() {
      super(com.ebay.jetstream.event.processor.hdfs.TestRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key1)) {
        this.key1 = data().deepCopy(fields()[0].schema(), other.key1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key2)) {
        this.key2 = data().deepCopy(fields()[1].schema(), other.key2);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TestRecord instance */
    private Builder(com.ebay.jetstream.event.processor.hdfs.TestRecord other) {
            super(com.ebay.jetstream.event.processor.hdfs.TestRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.key1)) {
        this.key1 = data().deepCopy(fields()[0].schema(), other.key1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.key2)) {
        this.key2 = data().deepCopy(fields()[1].schema(), other.key2);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'key1' field */
    public java.lang.CharSequence getKey1() {
      return key1;
    }
    
    /** Sets the value of the 'key1' field */
    public com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder setKey1(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.key1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key1' field has been set */
    public boolean hasKey1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key1' field */
    public com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder clearKey1() {
      key1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'key2' field */
    public java.lang.CharSequence getKey2() {
      return key2;
    }
    
    /** Sets the value of the 'key2' field */
    public com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder setKey2(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.key2 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'key2' field has been set */
    public boolean hasKey2() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'key2' field */
    public com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder clearKey2() {
      key2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TestRecord build() {
      try {
        TestRecord record = new TestRecord();
        record.key1 = fieldSetFlags()[0] ? this.key1 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.key2 = fieldSetFlags()[1] ? this.key2 : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
